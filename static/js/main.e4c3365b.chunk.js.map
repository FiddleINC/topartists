{"version":3,"sources":["hash.js","components/artists/artists.js","config.js","components/welcome/welcome.js","App.js","serviceWorker.js","index.js"],"names":["hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Artists","createList","props","console","log","_this","artistList","artists","forEach","artist","index","push","react_default","a","createElement","className","key","href","external_urls","spotify","target","rel","name","src","images","url","alt","alert","this","Component","scopes","Welcome","concat","join","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","token","album","duration_ms","is_playing","progress_ms","getCurrentlyPlaying","bind","assertThisInitialized","getTopArtists","_token","access_token","setState","_this2","AuthStr","axios","get","headers","Authorization","then","response","data","arrayList","items","catch","error","_this3","welcome_welcome","artists_artists","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e4c3365b.chunk.js","sourcesContent":["// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;\n","import React, { Component } from \"react\";\nimport \"./artists.css\";\n\nclass Artists extends Component {\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     artists: this.props.artists\n  //   };\n  // }\n\n  componentDidMount() {\n    alert(\"Click on the Image to open Spotify Profile\");\n  }\n\n  createList = props => {\n    console.log(this.props);\n\n    let artistList = [];\n    this.props.artists.forEach((artist, index) => {\n      artistList.push(\n        <div className=\"card\" key={index}>\n          <a\n            href={artist.external_urls.spotify}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <h1 className=\"card-title\">{artist.name}</h1>\n            <img\n              src={artist.images[0].url}\n              alt=\"thumb\"\n              className=\"card-image\"\n            />\n          </a>\n        </div>\n      );\n    });\n\n    return artistList;\n  };\n  render() {\n    return (\n      <div className=\"Artist\">\n        <div className=\"container\">{this.createList()}</div>\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default Artists;\n","export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"3ffc762137bb4446a79df7e9cde4a1e6\";\nexport const redirectUri = \"https://topartists.herokuapp.com/artists\";\nexport const scopes = [\n  \"user-top-read\",\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\"\n];\n","import React from \"react\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"../../config.js\";\nimport \"./welcome.css\";\n\nconst Welcome = () => {\n  return (\n    <div className=\"Welcome\">\n      <div className=\"middle \">\n        <h1>Find your Top Artists</h1>\n        <hr />\n        <br />\n        <a\n          className=\" btn btn--loginApp-link\"\n          href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n            \"%20\"\n          )}&response_type=token&show_dialog=true`}\n        >\n          Login to Spotify\n        </a>\n      </div>\n      <div className=\"bottomleft\">\n        <h4>\n          Made by{\" \"}\n          <a\n            className=\"github\"\n            href=\"https://github.com/FiddleINC/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Fiddle\n          </a>\n        </h4>\n      </div>\n    </div>\n  );\n};\nexport default Welcome;\n","import React, { Component } from \"react\";\nimport hash from \"./hash\";\n// import Player from \"./Player\";\nimport Artists from \"./components/artists/artists\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Welcome from \"./components/welcome/welcome\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      artists: []\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n    this.getTopArtists = this.getTopArtists.bind(this);\n  }\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      this.getCurrentlyPlaying(_token);\n      this.getTopArtists(_token);\n    }\n  }\n\n  getTopArtists(token) {\n    //Making a call\n    const AuthStr = \"Bearer \" + token;\n    axios\n      .get(\n        \"https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50\",\n        {\n          headers: { Authorization: AuthStr }\n        }\n      )\n      .then(response => {\n        // If request is good...\n        console.log(response.data);\n        const arrayList = [];\n        response.data.items.forEach(item => {\n          arrayList.push(item);\n        });\n        console.log(arrayList);\n        this.setState({\n          artists: arrayList\n        });\n        console.log(this.state.artists);\n      })\n      .catch(error => {\n        console.log(\"error \" + error);\n      });\n  }\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    const AuthStr = \"Bearer \" + token;\n    axios\n      .get(\"https://api.spotify.com/v1/me/player\", {\n        headers: { Authorization: AuthStr }\n      })\n      .then(response => {\n        // If request is good...\n        console.log(response.data);\n        this.setState({\n          item: response.data.item,\n          is_playing: response.data.is_playing,\n          progress_ms: response.data.progress_ms\n        });\n      })\n      .catch(error => {\n        console.log(\"error \" + error);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.token && <Welcome />}\n        {this.state.token && <Artists artists={this.state.artists} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}